<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue的基本指令、事件和样式</title>
    <link href="/2021/03/08/%E5%88%9D%E8%AF%86Vue/"/>
    <url>/2021/03/08/%E5%88%9D%E8%AF%86Vue/</url>
    
    <content type="html"><![CDATA[<h4 id="什么是-Vue？"><a href="#什么是-Vue？" class="headerlink" title="什么是 Vue？"></a>什么是 Vue？</h4><p>一种渐进式的 JS 框架。</p><h4 id="Vue-使用步骤"><a href="#Vue-使用步骤" class="headerlink" title="Vue 使用步骤"></a>Vue 使用步骤</h4><ul><li>先引入 Vue.js 文件</li><li>创建挂载对象</li><li>实例化 Vue 对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//第一步：引入Vue.js</span><br><br><span class="hljs-comment">//第二步：创建挂载节点</span><br><span class="hljs-comment">//注意不要挂载在html或者body内</span><br>&lt;div id=<span class="hljs-string">&quot;coco&quot;</span>&gt;<br>  &lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;<br>&lt;/div&gt;;<br><span class="hljs-comment">//第三步：创建Vue实例化对象</span><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&quot;#coco&quot;</span>,<br>  data: &#123;<br>    msg: <span class="hljs-string">&quot;helloworld&quot;</span>,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="Vue-基本指令"><a href="#Vue-基本指令" class="headerlink" title="Vue 基本指令"></a>Vue 基本指令</h4><ul><li>定义：自定义的属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//v-cloak 取消闪动</span><br>[v-cloak]&#123;<br>    display:none;<br>&#125;<br>&lt;div id=<span class="hljs-string">&quot;coco&quot;</span>&gt;<br>    <span class="hljs-comment">//在网速极慢的情况下，页面加载的时候会先闪现双花括号，所以使用v-cloak取消这个闪动</span><br>&lt;div v-cloak&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;<br><br><span class="hljs-comment">//v-pre 跳过编译</span><br>&lt;div v-pre&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;<br><br><span class="hljs-comment">//v-text 渲染text文本，无法渲染html标签，类似原生innerText</span><br>&lt;div v-text&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;<br><br><span class="hljs-comment">//v-html 渲染页面，可以渲染html标签，类似原生innerHTML</span><br>&lt;div v-html&gt;&#123;&#123;lable&#125;&#125;&lt;/div&gt;<br><br><span class="hljs-comment">//v-once 只渲染一次，后面再次更改后也不会重新编译渲染</span><br>&lt;div v-once&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;<br><br><span class="hljs-comment">//v-modle 双向绑定,一般给input绑定，重新输入值后，内存中的msg值也会响应改变，并重新渲染在div内</span><br>&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;<br>&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;msg&quot;</span>&gt;<br><br>&lt;/div&gt;<br><br><span class="hljs-comment">//实例化Vue对象</span><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el:<span class="hljs-string">&#x27;#coco&#x27;</span>,<br>    data:&#123;<br>        msg:<span class="hljs-string">&#x27;hello&#x27;</span>,<br>        lable:<span class="hljs-string">&#x27;&lt;h1&gt;just do it&lt;/h1&gt;&#x27;</span>,<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="Vue-事件指令"><a href="#Vue-事件指令" class="headerlink" title="Vue 事件指令"></a>Vue 事件指令</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//为DOM中的节点绑定事件</span><br><span class="hljs-comment">//&lt;标签 v-on:事件类型=&quot;事件处理函数&quot;&gt;</span><br><span class="hljs-comment">//&lt;标签 @事件类型=&quot;事件处理函数&quot;&gt;</span><br>&lt;div id=<span class="hljs-string">&quot;jojo&quot;</span>&gt;<br>    <span class="hljs-comment">//不传参绑定事件</span><br>    &lt;button v-on:click=<span class="hljs-string">&quot;foo&quot;</span>&gt;不传参&lt;/button&gt;<br>    &lt;button @click=<span class="hljs-string">&quot;foo&quot;</span>&gt;不传参&lt;/button&gt;<br><br>    <span class="hljs-comment">//传参绑定事件</span><br>    &lt;button v-on:click=<span class="hljs-string">&quot;loo(10)&quot;</span>&gt;传参&lt;<span class="hljs-regexp">/button&gt;  /</span><span class="hljs-regexp">/点击之后控制台打印10</span><br><span class="hljs-regexp">    &lt;button @click=&quot;loo(20)&quot;&gt;传参&lt;/</span>button&gt;<span class="hljs-comment">//点击之后控制台打印 20</span><br><br><span class="hljs-comment">//传参且传事件对象</span><br>&lt;button v-on:click=<span class="hljs-string">&quot;func(10,$event)&quot;</span>&gt;传参且传事件对象&lt;<span class="hljs-regexp">/button&gt; /</span><span class="hljs-regexp">/其中事件对象实参必须写$event</span><br><span class="hljs-regexp">&lt;/</span>div&gt;<br><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el:<span class="hljs-string">&#x27;#jojo&#x27;</span>,<br>    data:&#123;<br>        num:<span class="hljs-number">10</span>,<br>&#125;,<br>    methods:&#123;<br>        foo:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.num)<br>&#125;，<br>        loo:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(x)<br>&#125;,<br>     func:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">y,e</span>)</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(y)<br>            <span class="hljs-built_in">console</span>.log(e)<br>&#125;<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="Vue-事件修饰符"><a href="#Vue-事件修饰符" class="headerlink" title="Vue 事件修饰符"></a>Vue 事件修饰符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//事件修饰符格式</span><br>&lt;a href=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> v-on:click.prevent=<span class="hljs-string">&quot;handle&quot;</span>&gt; <span class="hljs-comment">//阻止默认行为</span><br>.stop <span class="hljs-comment">//阻止冒泡</span><br>.self <span class="hljs-comment">//只在目标DOM是绑定事件的元素触发时才触发</span><br>.once <span class="hljs-comment">//只触发一次</span><br>.capture <span class="hljs-comment">//在捕获阶段触发</span><br>.passive <span class="hljs-comment">// 在鼠标移动等事件中，由于每次触发事件的时候，浏览器都会查询是否调用阻止默认行为，所以会导致滑动卡顿，这个时候使用.passive，是让浏览器不要再查询是否阻止默认行为，就会提升鼠标移动的流畅度</span><br><span class="hljs-comment">//案件修饰符格式</span><br>&lt;input v-on:keyup.enter=<span class="hljs-string">&quot;handle&quot;</span>&gt; <span class="hljs-comment">//keyup,keydown,keypress,只有可以触发键盘事件的标签才可绑定，输入框input</span><br></code></pre></td></tr></table></figure><h4 id="Vue-的属性绑定"><a href="#Vue-的属性绑定" class="headerlink" title="Vue 的属性绑定"></a>Vue 的属性绑定</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//v-bind:</span><br>&lt;div id=<span class="hljs-string">&quot;dio&quot;</span>&gt;<br>    &lt;img v-bind:scr=<span class="hljs-string">&quot;imgSrc&quot;</span>&gt;<br>     <span class="hljs-comment">//简写</span><br>    &lt;img :scr=<span class="hljs-string">&quot;imgSrc&quot;</span>&gt;<br>&lt;/div&gt;<br><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el:<span class="hljs-string">&#x27;#dio&#x27;</span>,<br>    data:&#123;<br>        imgSrc:<span class="hljs-string">&#x27;url&#x27;</span><br>&#125;<br>&#125;)<br><br><span class="hljs-comment">//v-model的本质</span><br>&lt;div id=<span class="hljs-string">&quot;dio&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-bind:value=<span class="hljs-string">&quot;msg&quot;</span>  v-on:input=<span class="hljs-string">&quot;handle&quot;</span>&gt; <span class="hljs-comment">//input事件是原生事件，输入事件，可以监控输入的值</span><br>&lt;/div&gt;<br><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el:<span class="hljs-string">&#x27;#dio&#x27;</span>,<br>    data:&#123;<br>        msg:<span class="hljs-string">&#x27;hello&#x27;</span>,<br>&#125;<br>    methods:&#123;<br>    handle:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.msg = e.target.value<br>&#125;<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="Vue-样式绑定"><a href="#Vue-样式绑定" class="headerlink" title="Vue 样式绑定"></a>Vue 样式绑定</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//class绑定</span><br><span class="hljs-comment">//第一种：对象用法</span><br><span class="hljs-comment">//先写原生的css样式</span><br>.active&#123;<br>    width:100px;<br>    height:100px;<br>    backgroundColor:blue;<br>&#125;<br><span class="hljs-comment">//&lt;标签 :style=&quot;&#123;class类名：变量&#125;&quot;&gt;&lt;/标签&gt; //其中变量是一个布尔值，代表是否使用class类名</span><br>&lt;div v-bind:style=<span class="hljs-string">&quot;&#123;active:isActive&#125;&quot;</span>&gt;hello&lt;/div&gt;<br>&lt;button v-on:click=<span class="hljs-string">&quot;handle&quot;</span>&gt;切换&lt;/button&gt;<br><span class="hljs-comment">//实例化Vue对象</span><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el:<span class="hljs-string">&#x27;#ele&#x27;</span>;<br>    data:&#123;<br>    isActive:<span class="hljs-literal">true</span>;<br>&#125;,<br>   methods:&#123;<br>    handle:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.isActive = !<span class="hljs-built_in">this</span>.isActive<br>&#125;<br>&#125;<br>&#125;)<br><br><span class="hljs-comment">//第二种：数组用法</span><br><span class="hljs-comment">//首先，还是先写原生的css样式</span><br>.active&#123;<br>    width:100px;<br>    height:100px;<br>    backgroundColor:blue;<br>&#125;<br>.err&#123;<br>    font-size:12px<br>&#125;<br><span class="hljs-comment">//&lt;标签 :style=&quot;[属性名]&quot;&gt;&lt;/标签&gt; //其中变量是一个布尔值，代表是否使用class类名</span><br>&lt;div v-bind:style=<span class="hljs-string">&quot;[activeClass,errClass,&#x27;hehe&#x27;]&quot;</span>&gt;hello&lt;<span class="hljs-regexp">/div&gt; /</span><span class="hljs-regexp">/其中hehe是由单引号包裹，表示它是一个类名</span><br><span class="hljs-regexp">&lt;button v-on:click=&quot;handle&quot;&gt;切换&lt;/</span>button&gt; <span class="hljs-comment">//点击之后，切换activeClass变量名内容为空</span><br><br><span class="hljs-comment">//实例化Vue对象</span><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el:<span class="hljs-string">&#x27;#ele&#x27;</span>;<br>    data:&#123;<br>    activeClass:<span class="hljs-string">&#x27;active&#x27;</span>,<br>    errClass:<span class="hljs-string">&#x27;err&#x27;</span><br>&#125;,<br>   methods:&#123;<br>    handle:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.activeClass = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">//取消active类名</span><br>&#125;<br>&#125;<br>&#125;)<br><br><span class="hljs-comment">//第三种:属性绑定</span><br><span class="hljs-comment">//&lt;标签 :class=&quot;条件 ？&#x27;class名1&#x27;:&#x27;class名2&#x27; &quot;&gt;&lt;/标签&gt;   // 必须掌握！！</span><br><span class="hljs-comment">//首先，还是先写原生的css样式</span><br>.active&#123;<br>    width:100px;<br>    height:100px;<br>    backgroundColor:blue;<br>&#125;<br>.err&#123;<br>    font-size:12px<br>&#125;<br>&lt;div v-bind:style=<span class="hljs-string">&quot;2&gt;1? &#x27;active&#x27;:&#x27;err&#x27;&quot;</span>&gt;hello&lt;<span class="hljs-regexp">/div&gt; /</span><span class="hljs-regexp">/这里使用的是一个三元表达式</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/或者使用模板字符串</span><br><span class="hljs-regexp">&lt;div v-bind:style=`2&gt;1? $&#123;activeClass&#125;:$&#123;errClass&#125;`&gt;hello&lt;/</span>div&gt; <span class="hljs-comment">//这里使用的是一个三元表达式</span><br><br><span class="hljs-comment">//实例化Vue对象</span><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el:<span class="hljs-string">&#x27;#ele&#x27;</span>;<br>    data:&#123;<br>    activeClass:<span class="hljs-string">&#x27;active&#x27;</span>,<br>    errClass:<span class="hljs-string">&#x27;err&#x27;</span><br>&#125;,<br>   methods:&#123;<br>    handle:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.activeClass = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">//取消active类名</span><br>&#125;<br>&#125;<br>&#125;)<br><br><br><span class="hljs-comment">//style绑定</span><br><br><span class="hljs-comment">//第一种：对象语法</span><br><span class="hljs-comment">//&lt;标签 :style=&quot;&#123;样式属性名:变量&#125;&quot;&gt;&lt;/标签&gt;  变量的值是样式属性值！</span><br>&lt;div id=<span class="hljs-string">&quot;coco&quot;</span>&gt;<br>    &lt;div v-bind:style=<span class="hljs-string">&quot;&#123;color:acColor,font-size:fontSize&#125;&quot;</span>&gt;hello&lt;/div&gt;<br><span class="hljs-comment">//或者用以下的写法</span><br>    &lt;div v-bind:style=<span class="hljs-string">&quot;divStyle&quot;</span>&gt;hello&lt;/div&gt;<br>&lt;/div&gt;<br><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el:<span class="hljs-string">&#x27;#coco&#x27;</span>,<br>    data:&#123;<br>        acColor:<span class="hljs-string">&#x27;blue&#x27;</span>,<br>        fontSize:<span class="hljs-string">&#x27;20px&#x27;</span><br>        divStyle:&#123;<br>        color:<span class="hljs-string">&#x27;blue&#x27;</span>,<br>        fontSize:<span class="hljs-string">&#x27;20px&#x27;</span><br>    &#125;<br>    &#125;<br>&#125;)<br><br><span class="hljs-comment">//第二种：数组写法</span><br><span class="hljs-comment">//&lt;标签 :style=&quot;[变量]&quot;&gt;&lt;/标签&gt;  变量的值是样式描述对象 &#123;属性名:属性值&#125;</span><br>&lt;div id=<span class="hljs-string">&quot;coco&quot;</span>&gt;<br>    &lt;div v-bind:style=<span class="hljs-string">&quot;[divStyle,sizeStyle]&quot;</span>&gt;hello&lt;/div&gt;<br>&lt;/div&gt;<br><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el:<span class="hljs-string">&#x27;#coco&#x27;</span>,<br>    data:&#123;<br>        divStyle:&#123;<br>        color:<span class="hljs-string">&#x27;blue&#x27;</span>,<br>        fontSize:<span class="hljs-string">&#x27;20px&#x27;</span><br>    &#125;<br>        sizeStyle:&#123;<br>        width:<span class="hljs-string">&#x27;100px&#x27;</span>,<br>        height:<span class="hljs-string">&#x27;100px&#x27;</span><br>    &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>session和JWT身份认证</title>
    <link href="/2021/02/27/session%E5%92%8CJWT%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/"/>
    <url>/2021/02/27/session%E5%92%8CJWT%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h3 id="为什么需要身份验证"><a href="#为什么需要身份验证" class="headerlink" title="为什么需要身份验证?"></a>为什么需要身份验证?</h3><p>由于http本身是一个无状态的协议，他不会记录每次发送请求的用户的信息，这样就会导致服务器无法识别是哪个用户发送了请求；</p><h3 id="session的认证机制"><a href="#session的认证机制" class="headerlink" title="session的认证机制"></a>session的认证机制</h3><ol><li>web端向服务端发送身份验证请求;</li><li>服务端先验证数据库中是否存在传过来的账号密码，然后获取相关信息，并通过session方法将信息存储在一个sessionID密钥中，并将sessionID密钥放在cookie中保存并返回给客户端；</li><li>后来每次发送请求时都会携带这个sessionID到服务器，服务器根据这个唯一的ID值查询对应的用户信息并进行返回。</li></ol><h3 id="什么是cookie"><a href="#什么是cookie" class="headerlink" title="什么是cookie"></a>什么是cookie</h3><p>cookie是存储在浏览器里的一段不超过4KB的字符串，它是由一个名称(Name) 和 值(Value) 以及其他几个用于控制 Cookie 有效期, 安全性, 使用范围的可选属性组成的；</p><h3 id="cookie的作用"><a href="#cookie的作用" class="headerlink" title="cookie的作用"></a>cookie的作用</h3><p> 不用域名下的 Cookie 信息是独立的, 每当客户端发送请求时, 会自动把当前域名下所有未过期的 Cookie添加到请求头, 一同发送到服务器；</p><h3 id="cookie的特性"><a href="#cookie的特性" class="headerlink" title="cookie的特性"></a>cookie的特性</h3><ol><li><p>自动发送；</p></li><li><p>域名独立(不能跨域)；</p></li><li><p>过期时限；</p></li><li><p>不超过4KB；</p></li></ol><h3 id="JWT身份认证"><a href="#JWT身份认证" class="headerlink" title="JWT身份认证"></a>JWT身份认证</h3><ol><li>客户端发送身份验证请求;</li><li>服务端验证身份，验证通过后，将用户的信息经过加密后生产Token字符串，并返回给客户端;</li><li>Token值<strong>手动</strong>添加到localStorage或者SessionStorage中；</li><li>客户端再次发送请求后，需将Token值<strong>手动</strong>添加到Authorization中，一并传给服务端，后端再将Token值进行解密还原成用户的信息对象;</li></ol><h3 id="session和JWT身份认证的区别"><a href="#session和JWT身份认证的区别" class="headerlink" title="session和JWT身份认证的区别"></a>session和JWT身份认证的区别</h3><p>由于session身份认证存在以下缺点:</p><ol><li>session存储在服务器的内存中，会影响内存的开销；</li><li>session无法跨域；</li><li>由于session存储在内存中，所以session拓展性不强；</li><li>安全性低；</li></ol><p>而JWT身份认证可以很好的避免这些缺点；</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mySQL基础知识</title>
    <link href="/2021/02/24/mySQL%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <url>/2021/02/24/mySQL%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h2><p>数据库是专门用来管理，存储和组织数据的仓库</p><h2 id="传统数据的组织结构"><a href="#传统数据的组织结构" class="headerlink" title="传统数据的组织结构"></a>传统数据的组织结构</h2><p>传统数据库的组织结构分为：数据薄，数据表，数据行，字段</p><h2 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL"></a>什么是SQL</h2><p>SQL全称Structured Query Language，即结构化的查询语言，专门用来访问和处理数据库的编程语言</p><h2 id="查询语句-以下数据表名均为users"><a href="#查询语句-以下数据表名均为users" class="headerlink" title="查询语句(以下数据表名均为users)"></a>查询语句(以下数据表名均为users)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//查询某个数据表的全部内容</span><br>select * <span class="hljs-keyword">from</span> users<br><br><span class="hljs-comment">//查询某个数据表的部分内容</span><br>select username,password <span class="hljs-keyword">from</span> users<br></code></pre></td></tr></table></figure><h2 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//插入数据到某个数据表中</span><br>insert into users(username,password) values(<span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="更新语句"><a href="#更新语句" class="headerlink" title="更新语句"></a>更新语句</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//更新数据表中某条数据</span><br>update users set password=<span class="hljs-string">&#x27;888888&#x27;</span> where id=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//删除数据表中某条数据</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> users where id=<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="and和or运算符"><a href="#and和or运算符" class="headerlink" title="and和or运算符"></a>and和or运算符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//使用多个条件对数据表中的数据进行相关操作,and为多种条件必须同时满足</span><br>select * <span class="hljs-keyword">from</span> users where username=<span class="hljs-string">&#x27;jojo&#x27;</span> and status=<span class="hljs-number">1</span><br><br><span class="hljs-comment">//or也是多个条件，但是只需要满足一个即可</span><br>select * <span class="hljs-keyword">from</span> users where id=<span class="hljs-number">5</span> or status=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="order-by-asc-升序-和-desc-降序"><a href="#order-by-asc-升序-和-desc-降序" class="headerlink" title="order by asc(升序) 和 desc(降序)"></a>order by asc(升序) 和 desc(降序)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//通过status属性升序排列数据表</span><br>select * <span class="hljs-keyword">from</span> users order by status asc<br><br><span class="hljs-comment">//通过id属性降序排列数据表</span><br>select * <span class="hljs-keyword">from</span> users order by id desc<br><br><span class="hljs-comment">//升序和降序组合排列(通过status升序后再通过id降序)</span><br>select * <span class="hljs-keyword">from</span> users order by status asc,id desc<br><br><span class="hljs-comment">//where和排序混合使用：id&gt;2且降序排序</span><br>select * <span class="hljs-keyword">from</span> users where id&gt;<span class="hljs-number">2</span> order by id desc<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>node中模块的加载机制</title>
    <link href="/2021/02/21/node%E4%B8%AD%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/02/21/node%E4%B8%AD%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="模块的缓存机制"><a href="#模块的缓存机制" class="headerlink" title="模块的缓存机制"></a>模块的缓存机制</h2><ul><li>模块在第一次加载后会被缓存, 如果每次调用相同模块都解析到同一文件，则返回相同的对象,不会导致模块的代码被执行多次</li></ul><h2 id="内置模块的加载机制"><a href="#内置模块的加载机制" class="headerlink" title="内置模块的加载机制"></a>内置模块的加载机制</h2><ul><li>在存在相同名称的时候，会优先加载内置模块</li></ul><h2 id="自定义模块的加载机制"><a href="#自定义模块的加载机制" class="headerlink" title="自定义模块的加载机制"></a>自定义模块的加载机制</h2><ul><li><p>在引入自定义文件模块时，如果路径后带后缀，就会加载指定文件，如果不加后缀名，加载顺序为.js =&gt; .json =&gt; node =&gt; 报错</p></li><li><p>在引入自定义目录模块时，会先找目录下的package.json文件，然后在该文件中查找main属性对应的主入口，如果没有就找index.js文件 ，再没有就报错</p></li></ul><h2 id="第三方模块的加载机制"><a href="#第三方模块的加载机制" class="headerlink" title="第三方模块的加载机制"></a>第三方模块的加载机制</h2><ul><li><p>在查找文件的时候根据module.paths属性数组中的路径，由内向外查找，保持就近原则；以下为作者在自己电脑上输出module.paths的属性值，仅供参考</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  <span class="hljs-string">&#x27;C:\\Users\\mxs\\Desktop\\node\\lesson003\\04-第三方模块的加载机制\\node_modules&#x27;</span>,<br>  <span class="hljs-string">&#x27;C:\\Users\\mxs\\Desktop\\node\\lesson003\\node_modules&#x27;</span>,<br>  <span class="hljs-string">&#x27;C:\\Users\\mxs\\Desktop\\node\\node_modules&#x27;</span>,<br>  <span class="hljs-string">&#x27;C:\\Users\\mxs\\Desktop\\node_modules&#x27;</span>,<br>  <span class="hljs-string">&#x27;C:\\Users\\mxs\\node_modules&#x27;</span>,<br>  <span class="hljs-string">&#x27;C:\\Users\\node_modules&#x27;</span>,<br>  <span class="hljs-string">&#x27;C:\\node_modules&#x27;</span><br>]<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>npm的指令用法</title>
    <link href="/2021/02/21/npm%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2021/02/21/npm%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="npm指令"><a href="#npm指令" class="headerlink" title="npm指令"></a>npm指令</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm init -y <span class="hljs-comment">//用来创建package.json文件</span><br></code></pre></td></tr></table></figure><h3 id="下载包"><a href="#下载包" class="headerlink" title="下载包"></a>下载包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install 包名 / npm i 包名<br></code></pre></td></tr></table></figure><h3 id="查看包"><a href="#查看包" class="headerlink" title="查看包"></a>查看包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm view 包名<br></code></pre></td></tr></table></figure><h3 id="下载指定版本包"><a href="#下载指定版本包" class="headerlink" title="下载指定版本包"></a>下载指定版本包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i 包名@版本号<br></code></pre></td></tr></table></figure><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">一、package.json 配置文件中有两个关键的配置项: <br>     <br>     <span class="hljs-number">1.</span> dependencies: 在生产环境中所需要的软件包<br>     <span class="hljs-number">2.</span> devDependencies: 仅本地开发和测试所需要的软件包<br><br>   二、上述配置项的作用<br>     其他项目成员在执行 <span class="hljs-string">`npm install`</span> 命令时，会自动根据 package.json 文件中记录的包名称和版本信息<br>   全部进行下载<br></code></pre></td></tr></table></figure><h3 id="下载依赖-dependencies-里的所有包"><a href="#下载依赖-dependencies-里的所有包" class="headerlink" title="下载依赖(dependencies)里的所有包"></a>下载依赖(dependencies)里的所有包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i<br></code></pre></td></tr></table></figure><h3 id="卸载指定包"><a href="#卸载指定包" class="headerlink" title="卸载指定包"></a>卸载指定包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm uninstall 包名<br></code></pre></td></tr></table></figure><h3 id="使用nrm切换源"><a href="#使用nrm切换源" class="headerlink" title="使用nrm切换源"></a>使用nrm切换源</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">- <span class="hljs-number">1.</span>先在全局下载nrm<br>   npm i -g nrm<br>- <span class="hljs-number">2.</span>查看目前使用的源<br>   npm ls<br>- <span class="hljs-number">3.</span>切换源<br>   npm use 源名<br></code></pre></td></tr></table></figure><h3 id="在终端登录npm账号"><a href="#在终端登录npm账号" class="headerlink" title="在终端登录npm账号"></a>在终端登录npm账号</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm login<br></code></pre></td></tr></table></figure><h3 id="在终端发布包"><a href="#在终端发布包" class="headerlink" title="在终端发布包"></a>在终端发布包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm publish <br></code></pre></td></tr></table></figure><h3 id="在终端删除包"><a href="#在终端删除包" class="headerlink" title="在终端删除包"></a>在终端删除包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm unpublish 包名 --force<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数组的去重方法</title>
    <link href="/2021/02/09/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2021/02/09/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>//第一种数组去重的方法:遍历数组，用indexOf方法找出数组中，返回值为-1的元素并添加至新数组<br>var arr = [7,5,3,2,5,8,5,8,7]</p><p>var newarr = []</p><p>for(var i = 0;i&lt;arr.length;i++) {</p><p>if(newarr.indexOf(arr[i] ) == -1){</p><p>newarr.push(arr[i])</p><p>}</p><p>}<br>//第二种数组去重方法:使用filter方法筛选数组，找出数组元素的第一次找到它的索引号和该元素的索引号是否一致，来判断该元素是不是第一次被找到，然后添加至新数组<br>var arr = [7,5,3,2,5,8,5,8,7]<br>function setArr(arr) {<br>  var newArr = arr.filter(function(item,index) {<br>    return arr.indexOf(item) == index<br>})<br>  return newArr<br>}<br>var res = setArr(arr)<br>console.log(res)</p><p>//第三种数组去重方法:利用es6提供的拓展用算符和set构造函数，set数据结构传参后，返回的值是一个伪数组，且伪数组内的元素存在唯一性，最后用拓展运算符转换为真数组<br>let arr = [7,5,3,2,5,8,5,8,7]<br>const res = new Set(arr)//这样生成的res是一个对象<br>let newArr = […res] //转换成数组<br>console.log(newArr)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>es6新增的声明变量的两种方式</title>
    <link href="/2021/02/09/es6%E6%96%B0%E5%A2%9E%E7%9A%84%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <url>/2021/02/09/es6%E6%96%B0%E5%A2%9E%E7%9A%84%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h4 id="es6的方法-重点"><a href="#es6的方法-重点" class="headerlink" title="es6的方法(重点)"></a>es6的方法(重点)</h4><h5 id="ES6新增的两种声明变量的方式："><a href="#ES6新增的两种声明变量的方式：" class="headerlink" title="ES6新增的两种声明变量的方式："></a>ES6新增的两种声明变量的方式：</h5><p>1.使用关键字let对变量进行申明,特点如下：</p><p>a.没有变量提升，必须先声明再使用；</p><p>b.存在’’暂存死区’’(存在但无法访问)；</p><p>c.存在块级作用域，只能在块级作用域或者子块级作用域内使用；</p><p>d.不能重复声明同一个变量名;</p><p>e.声明的变量不能挂载在window上;</p><p>2.使用关键词const对常量进行申明,const具有和let一样的特点，但是比let多出以下特点:</p><p>a.声明常量时必须进行初始化;</p><p>b.声明的常量为简单数据类型时，不可直接进行修改;</p><p>c.声明的常量为复杂数据类型时，可以对复杂数据内的属性或者方法进行修改，这是因为，复杂数据类型声明的是地址值，修改数据内属性或方法并不改变常量的地址值；</p><p>对于块级作用域的使用:<br>在我们使用for循环时：<br>for(var i = 0;i&lt;5; i++) {<br>    console.log(‘hello’)<br>}</p><p>console.log(i) //var声明的变量是没有块级作用域，所以在for循环的外面可以输出i的值，且i = 5；</p><p>但是如果在for循环内使用，let或者const声明变量，则会存在块级作用域</p><p>for(let i = 0; i&lt;5; i++) {<br>    console.log(‘hello’)<br>}<br>console.log(i) </p><p>//这里会报错，因为let是在for循环内声明的变量，存在着块级作用域，而打印出来的i处于全局范围内，故无法读取i</p><p>暂存死区的解释：</p><p>function foo() {<br>    var num = 10<br>    return function fn() {<br>        console.log(num)<br>        let num = 5<br>    }<br>}<br>foo()</p><p>在调用函数后，返回的值会是报错，以前通过var声明的变量，通过作用域链，如果在当前局部作用域找不到变量，会向上一级寻找；但是let声明的变量不行，js在解析过程中找到当前作用域存在需要打印的变量，但是由于let声明的变量无法进行变量提升，必须先声明再使用，于是造成系统报错，且报错意思为，在当前作用域找到了变量，但是无法使用，形成了暂存死区</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/02/05/hello-world/"/>
    <url>/2021/02/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
